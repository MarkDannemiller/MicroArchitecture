$date
	Thu Mar 27 13:39:41 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module IF_stage_tb $end
$var wire 32 ! test_instruction [31:0] $end
$var wire 32 " instruction [31:0] $end
$var wire 32 # PC_next [31:0] $end
$var wire 32 $ PC_1 [31:0] $end
$var parameter 32 % CLK_PERIOD $end
$var reg 2 & BS [1:0] $end
$var reg 32 ' BrA [31:0] $end
$var reg 32 ( JMP [31:0] $end
$var reg 32 ) PC_initial [31:0] $end
$var reg 1 * PS $end
$var reg 32 + RAA [31:0] $end
$var reg 1 , Z $end
$var reg 1 - clk $end
$var reg 1 . rst $end
$var reg 32 / test_addr [31:0] $end
$scope module dut $end
$var wire 2 0 BS [1:0] $end
$var wire 32 1 BrA [31:0] $end
$var wire 32 2 JMP [31:0] $end
$var wire 32 3 PC [31:0] $end
$var wire 1 * PS $end
$var wire 32 4 RAA [31:0] $end
$var wire 1 , Z $end
$var wire 1 - clk $end
$var wire 1 . rst $end
$var wire 32 5 instruction [31:0] $end
$var wire 32 6 PC_next [31:0] $end
$var wire 32 7 PC_1 [31:0] $end
$scope module inst_mem $end
$var wire 32 8 addr [31:0] $end
$var wire 32 9 instruction [31:0] $end
$var integer 32 : i [31:0] $end
$upscope $end
$scope module mux_c $end
$var wire 2 ; BS [1:0] $end
$var wire 32 < BrA [31:0] $end
$var wire 32 = JMP [31:0] $end
$var wire 32 > PC_1 [31:0] $end
$var wire 1 * PS $end
$var wire 32 ? RAA [31:0] $end
$var wire 1 , Z $end
$var wire 32 @ top_path [31:0] $end
$var wire 32 A out [31:0] $end
$var wire 1 B branch_condition $end
$var wire 32 C bottom_path [31:0] $end
$var wire 1 D BS1 $end
$var wire 1 E BS0 $end
$upscope $end
$upscope $end
$scope module inst_mem_test $end
$var wire 32 F addr [31:0] $end
$var wire 32 G instruction [31:0] $end
$var integer 32 H i [31:0] $end
$upscope $end
$scope task initialize $end
$upscope $end
$scope task load_test_instructions $end
$upscope $end
$scope task test_bnz_taken $end
$upscope $end
$scope task test_branch_not_taken $end
$upscope $end
$scope task test_branch_taken $end
$upscope $end
$scope task test_instruction_memory $end
$upscope $end
$scope task test_jump_immediate $end
$upscope $end
$scope task test_jump_register $end
$upscope $end
$scope task test_sequential_fetch $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b1010 %
$end
#0
$dumpvars
b10000000000 H
b0 G
b0 F
0E
0D
b110000 C
0B
b1 A
b1 @
b110000 ?
b1 >
b1000000 =
b100000 <
b0 ;
b10000000000 :
b0 9
b0 8
b1 7
b1 6
b0 5
b110000 4
b0 3
b1000000 2
b100000 1
b0 0
b0 /
1.
0-
0,
b110000 +
0*
b0 )
b1000000 (
b100000 '
b0 &
b1 $
b1 #
b0 "
b0 !
$end
#5000
1-
#10000
0-
#15000
1-
#20000
0-
0.
#25000
1-
#30000
0-
#35000
1-
#40000
b10 #
b10 6
b10 A
b10 @
b100000100001000000000000000 "
b100000100001000000000000000 5
b100000100001000000000000000 9
0-
b10 $
b10 7
b10 >
b1 )
b1 3
b1 8
#45000
1-
#50000
b1000000 C
b100000 #
b100000 6
b100000 A
1B
1E
b100000 @
b1010000100001000000000000000 "
b1010000100001000000000000000 5
b1010000100001000000000000000 9
0-
1,
b1 &
b1 0
b1 ;
b11 $
b11 7
b11 >
b10 )
b10 3
b10 8
#55000
1-
#60000
b11 #
b11 6
b11 A
b11 @
0B
0-
0,
#65000
1-
#70000
b100000 #
b100000 6
b100000 A
b100000 @
1B
0-
1*
#75000
1-
#80000
b11 @
b110000 #
b110000 6
b110000 A
b110000 C
1D
0E
0-
b10 &
b10 0
b10 ;
#85000
1-
#90000
b1000000 #
b1000000 6
b1000000 A
b100000 @
b1000000 C
1E
0-
b11 &
b11 0
b11 ;
#95000
1-
#100000
0-
#105000
1-
#110000
b100000100001000000000000000 !
b100000100001000000000000000 G
0-
b1 /
b1 F
#115000
1-
#120000
b1010000100001000000000000000 !
b1010000100001000000000000000 G
0-
b10 /
b10 F
#125000
1-
#130000
0-
#135000
1-
#140000
0-
#145000
1-
#150000
0-
